﻿using System;
using System.Collections;
using System.Collections.Generic;
using StrawberryShake;

namespace Foo
{
    public class MultipleFragmentsQuery.graphql
        : IDocument
    {
        private readonly byte[] _hashName = new byte[]
        {
            109,
            100,
            53,
            72,
            97,
            115,
            104
        };
        private readonly byte[] _hash = new byte[]
        {
            70,
            65,
            119,
            56,
            47,
            77,
            115,
            77,
            50,
            81,
            114,
            122,
            88,
            103,
            70,
            53,
            72,
            76,
            117,
            74,
            77,
            81,
            61,
            61
        };
        private readonly byte[] _content = new byte[]
        {
            113,
            117,
            101,
            114,
            121,
            32,
            103,
            101,
            116,
            72,
            101,
            114,
            111,
            32,
            123,
            32,
            104,
            101,
            114,
            111,
            32,
            123,
            32,
            46,
            46,
            46,
            32,
            72,
            101,
            114,
            111,
            32,
            95,
            95,
            116,
            121,
            112,
            101,
            110,
            97,
            109,
            101,
            32,
            125,
            32,
            95,
            95,
            116,
            121,
            112,
            101,
            110,
            97,
            109,
            101,
            32,
            125,
            32,
            102,
            114,
            97,
            103,
            109,
            101,
            110,
            116,
            32,
            72,
            101,
            114,
            111,
            32,
            111,
            110,
            32,
            67,
            104,
            97,
            114,
            97,
            99,
            116,
            101,
            114,
            32,
            123,
            32,
            46,
            46,
            46,
            32,
            72,
            97,
            115,
            78,
            97,
            109,
            101,
            32,
            46,
            46,
            46,
            32,
            72,
            97,
            115,
            70,
            114,
            105,
            101,
            110,
            100,
            115,
            32,
            95,
            95,
            116,
            121,
            112,
            101,
            110,
            97,
            109,
            101,
            32,
            125,
            32,
            102,
            114,
            97,
            103,
            109,
            101,
            110,
            116,
            32,
            70,
            114,
            105,
            101,
            110,
            100,
            32,
            111,
            110,
            32,
            67,
            104,
            97,
            114,
            97,
            99,
            116,
            101,
            114,
            67,
            111,
            110,
            110,
            101,
            99,
            116,
            105,
            111,
            110,
            32,
            123,
            32,
            110,
            111,
            100,
            101,
            115,
            32,
            123,
            32,
            46,
            46,
            46,
            32,
            72,
            97,
            115,
            78,
            97,
            109,
            101,
            32,
            95,
            95,
            116,
            121,
            112,
            101,
            110,
            97,
            109,
            101,
            32,
            125,
            32,
            95,
            95,
            116,
            121,
            112,
            101,
            110,
            97,
            109,
            101,
            32,
            125,
            32,
            102,
            114,
            97,
            103,
            109,
            101,
            110,
            116,
            32,
            72,
            97,
            115,
            78,
            97,
            109,
            101,
            32,
            111,
            110,
            32,
            67,
            104,
            97,
            114,
            97,
            99,
            116,
            101,
            114,
            32,
            123,
            32,
            110,
            97,
            109,
            101,
            32,
            95,
            95,
            116,
            121,
            112,
            101,
            110,
            97,
            109,
            101,
            32,
            125,
            32,
            102,
            114,
            97,
            103,
            109,
            101,
            110,
            116,
            32,
            72,
            97,
            115,
            70,
            114,
            105,
            101,
            110,
            100,
            115,
            32,
            111,
            110,
            32,
            67,
            104,
            97,
            114,
            97,
            99,
            116,
            101,
            114,
            32,
            123,
            32,
            102,
            114,
            105,
            101,
            110,
            100,
            115,
            32,
            123,
            32,
            46,
            46,
            46,
            32,
            70,
            114,
            105,
            101,
            110,
            100,
            32,
            95,
            95,
            116,
            121,
            112,
            101,
            110,
            97,
            109,
            101,
            32,
            125,
            32,
            95,
            95,
            116,
            121,
            112,
            101,
            110,
            97,
            109,
            101,
            32,
            125
        };

        public ReadOnlySpan<byte> HashName => _hashName;

        public ReadOnlySpan<byte> Hash => _hash;

        public ReadOnlySpan<byte> Content => _content;

        public static MultipleFragmentsQuery.graphql Default { get; } = new MultipleFragmentsQuery.graphql();

        public override string ToString() => 
            @"query getHero {
              hero {
                ... Hero
              }
            }
            
            fragment Hero on Character {
              ... HasName
              ... HasFriends
            }
            
            fragment Friend on CharacterConnection {
              nodes {
                ... HasName
              }
            }
            
            fragment HasName on Character {
              name
            }
            
            fragment HasFriends on Character {
              friends {
                ... Friend
              }
            }";
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using StrawberryShake;

namespace Foo
{
    public interface IGetHero
    {
        IHero Hero { get; }
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using StrawberryShake;

namespace Foo
{
    public class GetHero
        : IGetHero
    {
        public IHero Hero { get; set; }
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using StrawberryShake;

namespace Foo
{
    public class GetHeroOperation
        : IOperation<IGetHero>
    {

        public string Name => "getHero";

        public IDocument Document => Multiple_Fragments_Query.graphql.Default;


        public IReadOnlyList<VariableValue> GetVariableValues()
        {
            var variables = new List<VariableValue>();


            return variables;
        }
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using StrawberryShake;

namespace Foo
{
    public interface IDroid
        : IHero
    {
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using StrawberryShake;

namespace Foo
{
    public interface IHero
        : IHasName
        , IHasFriends
    {
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using StrawberryShake;

namespace Foo
{
    public interface IHasName
    {
        string Name { get; }
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using StrawberryShake;

namespace Foo
{
    public interface IHasFriends
    {
        IFriend Friends { get; }
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using StrawberryShake;

namespace Foo
{
    public class Droid
        : IDroid
    {
        public string Name { get; set; }

        public IFriend Friends { get; set; }
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using StrawberryShake;

namespace Foo
{
    public interface IHuman
        : IHero
    {
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using StrawberryShake;

namespace Foo
{
    public class Human
        : IHuman
    {
        public string Name { get; set; }

        public IFriend Friends { get; set; }
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using StrawberryShake;

namespace Foo
{
    public interface IFriend
    {
        IReadOnlyList<IHasName> Nodes { get; }
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using StrawberryShake;

namespace Foo
{
    public class Friend
        : IFriend
    {
        public IReadOnlyList<IHasName> Nodes { get; set; }
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using System.Text.Json;
using StrawberryShake;
using StrawberryShake.Http;

namespace Foo
{
    public class GetHeroResultParser
        : GeneratedResultParserBase<IGetHero>
    {
        private readonly IValueSerializer _stringSerializer;

        public GetHeroResultParser(IEnumerable<IValueSerializer> serializers)
        {
            IReadOnlyDictionary<string, IValueSerializer> map = serializers.ToDictionary();

            if (!map.TryGetValue("String", out IValueSerializer serializer)){
                throw new ArgumentException(
                    "There is no serializer specified for `String`.",
                    nameof(serializers));
            }
            _stringSerializer = serializer;
        }

        protected override IGetHero ParserData(JsonElement data)
        {
            var getHero = new GetHero();
            getHero.Hero = ParseRootHero(data, "hero");
            return getHero;
        }

        private IHero ParseRootHero(
            JsonElement parent,
            string field)
        {
            if (!parent.TryGetProperty(field, out JsonElement obj))
            {
                return null;
            }

            string type = obj.GetProperty(TypeName).GetString();

            if (string.Equals(type, "Droid", StringComparison.Ordinal))
            {
                var droid = new Droid();
                droid.Name = (string)DeserializeString(obj, "name");
                droid.Friends = ParseRootHeroFriends(obj, "friends");
                return droid;
            }

            if (string.Equals(type, "Human", StringComparison.Ordinal))
            {
                var human = new Human();
                human.Name = (string)DeserializeString(obj, "name");
                human.Friends = ParseRootHeroFriends(obj, "friends");
                return human;
            }

            throw new UnknownSchemaTypeException(type);
        }

        private IFriend ParseRootHeroFriends(
            JsonElement parent,
            string field)
        {
            if (!parent.TryGetProperty(field, out JsonElement obj))
            {
                return null;
            }

            var friend = new Friend();
            friend.Nodes = ParseRootHeroFriendsNodes(obj, "nodes");
            return friend;
        }

        private IReadOnlyList<IHasName> ParseRootHeroFriendsNodes(
            JsonElement parent,
            string field)
        {
            if (!parent.TryGetProperty(field, out JsonElement obj))
            {
                return null;
            }

            string type = obj.GetProperty(TypeName).GetString();

            if (string.Equals(type, "Droid", StringComparison.Ordinal))
            {
                int objLength = obj.GetArrayLength();
                var list = new IHasName[objLength];

                for (int objIndex = 0; objIndex < objLength; objIndex++)
                {
                    JsonElement element = obj[objIndex];
                    var entity = new Droid();
                    entity.Name = (string)DeserializeString(element, "name");
                    list[objIndex] = entity;
                }

                return list;
            }

            if (string.Equals(type, "Human", StringComparison.Ordinal))
            {
                int objLength = obj.GetArrayLength();
                var list = new IHasName[objLength];

                for (int objIndex = 0; objIndex < objLength; objIndex++)
                {
                    JsonElement element = obj[objIndex];
                    var entity = new Human();
                    entity.Name = (string)DeserializeString(element, "name");
                    list[objIndex] = entity;
                }

                return list;
            }

            throw new UnknownSchemaTypeException(type);
        }

        private string DeserializeString(JsonElement obj, string fieldName)
        {
            if (!obj.TryGetProperty(fieldName, out JsonElement value))
            {
                return null;
            }

            return (string)_stringSerializer.Serialize(value.GetString());
        }
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using StrawberryShake;

namespace Foo
{
    public interface IStarWarsClient
    {
        Task<IOperationResult<IGetHero>> GetHeroAsync();

        Task<IOperationResult<IGetHero>> GetHeroAsync(
            CancellationToken cancellationToken);
    }
}


using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using StrawberryShake;

namespace Foo
{
    public class StarWarsClient
        : IStarWarsClient
    {
        private readonly IOperationExecutor _executor;

        public StarWarsClient(IOperationExecutor executor)
        {
            _executor = executor ?? throw new ArgumentNullException(nameof(executor));
        }

        public Task<IOperationResult<IGetHero>> GetHeroAsync() =>
            GetHeroAsync(CancellationToken.None);

        public Task<IOperationResult<IGetHero>> GetHeroAsync(
            CancellationToken cancellationToken)
        {

            return _executor.ExecuteAsync(
                new GetHeroOperation(),
                cancellationToken);
        }
    }
}


