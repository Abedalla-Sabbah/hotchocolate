using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Reflection;

namespace HotChocolate.Resolvers
{
    public class Gen
    {
        private static IEnumerable<Expression> CreateParameters(
            IEnumerable<ParameterInfo> parameters,
            ParameterExpression context,
            Type contextType,
            IDictionary<Func<ParameterInfo, bool>, Expression> custom)
        {
            MethodInfo getService = typeof(IServiceProvider)
                .GetTypeInfo()
                .GetDeclaredMethod("GetService");

            foreach (ParameterInfo parameter in parameters)
            {
                if (contextType.IsAssignableFrom(parameter.ParameterType))
                {
                    yield return context;
                }
                else
                {
                    yield return CreateParameterExpression(parameter, context);
                }
            }
        }

        private static Expression CreateParameterExpression(ParameterInfo parameter, ParameterExpression context)
        {
            Expression.Convert(Expression.Call(
                context,
                getService,
                Expression.Constant(parameter.ParameterType)),
                parameter.ParameterType);
        }

        private static MethodInfo GetParent()
        {

        }
    }
}
